\*
* Name: Mohaned Khaled Hassan
* ID: 2001372
* GitHub: Username: MohandKhh
*/

package Project;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class Main extends Application {
        private File inputFile;
        static File oututFile = null;

        public static void main(String[] args) {

            launch(args);
        }

        @Override
        public void start(Stage primaryStage) {

            primaryStage.setTitle("Hello");
            GridPane grid = new GridPane();
            Pane layout = new Pane();
            Scene scene1 = new Scene(grid, 400, 500);
            Scene scene2 = new Scene(layout,1500,750);
            grid.setVgap(10);
            grid.setHgap(3);
            Label lb = new Label("Please Choose your MDL file");
            javafx.scene.control.Button btn = new javafx.scene.control.Button("       Browse       ");
            btn.setOnAction(z -> {
                FileChooser fc = new FileChooser();
                fc.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("MDL File", "*mdl"));
                inputFile = fc.showOpenDialog(primaryStage);
                System.out.println(inputFile);
                
                
/*
***********************************************************************
*************************************************************************************************
*/

\*
* Name: Salma Yasser Abdelmageed Meckawy Hemdan
* ID: 20P7211
* GitHub Username: Salma20020418
*/

 //file extraction
                try {
                    oututFile = FileHandling.extract(inputFile);
                    System.out.println("Extraction completed. Output file: " + oututFile.getName());
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                // block extraction
                try {
                    for (Block b : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                        System.out.println(b);
                        System.out.println("Input Points = " + b.calculateLeftSidePoints());
                        System.out.println("Output Points = " + b.calculateRightSidePoints());
                    }
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }

                System.out.println();
                //line extraction
                try {
                    for (Line l : PropertiesOfDiagrams.extractLine(oututFile))
                        System.out.println(l);
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                
                
/*
*****************************************************************************************************
******************************************************************************************************************
 * Begining
 * Of
 * JAVAFX
 * */
                
                
  /*
   * Name: Mostafa Hessin ahmed qenawy
   * ID :2000931
   * Github : username: MostafaQenawy
   */

                Image image = null;
                ImageView imageView = null;


                try {
                    for (Block b : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                        double width = (b.positionX2) - (b.positionX1);
                        double height = (b.positionY2) - (b.positionY1);
                        Rectangle r = new Rectangle((b.positionX1), (b.positionY1), width, height);
                        r.setFill(Color.WHITE);
                        r.setStrokeWidth(3);
                        r.setStroke(Color.web("39A8E8FF"));
                        r.strokeWidthProperty();

                        Label label = new Label(b.name);
                        label.setTextFill(Color.web("3399CC"));
                        label.setFont(new Font(12));
                        Font boldFont = Font.font(label.getFont().getFamily(), FontWeight.BOLD, label.getFont().getSize());
                        label.setFont(boldFont);
                        label.setLayoutX(b.positionX1);
                        label.setLayoutY(b.positionY2 + 3);
                        layout.getChildren().addAll(label, r);

                        if (!b.blockMirror) {
                            if (b.inputsSymbols != null && b.inputsSymbols.length() == b.calculateLeftSidePoints().size()) {
                                for (int i = 0; i < b.inputsSymbols.length(); i++) {
                                    String character = Character.toString(b.inputsSymbols.charAt(i));
                                    Text symbolIn = new Text(character);
                                    symbolIn.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolIn.getFont().getFamily(), FontWeight.BOLD, symbolIn.getFont().getSize());
                                    symbolIn.setFont(boldFont2);
                                    symbolIn.setX(b.calculateLeftSidePoints().get(i).x + 1);
                                    symbolIn.setY(b.calculateLeftSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolIn);
                                }
                            }

                            if (b.outputsSymbols != null && b.outputsSymbols.length() == b.calculateRightSidePoints().size()) {
                                for (int i = 0; i < b.outputsSymbols.length(); i++) {
                                    String character = Character.toString(b.outputsSymbols.charAt(i));
                                    Text symbolOut = new Text(character);
                                    symbolOut.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolOut.getFont().getFamily(), FontWeight.BOLD, symbolOut.getFont().getSize());
                                    symbolOut.setFont(boldFont2);
                                    symbolOut.setX(b.calculateRightSidePoints().get(i).x + 1);
                                    symbolOut.setY(b.calculateRightSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolOut);
                                }
                            }
                        } else if (b.blockMirror) {
                            if (b.inputsSymbols != null && b.inputsSymbols.length() == b.calculateRightSidePoints().size()) {
                                for (int i = 0; i < b.inputsSymbols.length(); i++) {
                                    String character = Character.toString(b.inputsSymbols.charAt(i));
                                    Text symbolIn = new Text(character);
                                    symbolIn.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolIn.getFont().getFamily(), FontWeight.BOLD, symbolIn.getFont().getSize());
                                    symbolIn.setFont(boldFont2);
                                    symbolIn.setX(b.calculateRightSidePoints().get(i).x + 1);
                                    symbolIn.setY(b.calculateRightSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolIn);
                                }
                            }

                            if (b.outputsSymbols != null && b.outputsSymbols.length() == b.calculateLeftSidePoints().size()) {
                                for (int i = 0; i < b.outputsSymbols.length(); i++) {
                                    String character = Character.toString(b.outputsSymbols.charAt(i));
                                    Text symbolOut = new Text(character);
                                    symbolOut.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolOut.getFont().getFamily(), FontWeight.BOLD, symbolOut.getFont().getSize());
                                    symbolOut.setFont(boldFont2);
                                    symbolOut.setX(b.calculateLeftSidePoints().get(i).x);
                                    symbolOut.setY(b.calculateLeftSidePoints().get(i).y);
                                    layout.getChildren().add(symbolOut);
                                }
                            }
                        }
//                        if (b.name.equalsIgnoreCase("Saturation")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Saturation.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                        }
//                        else if (b.name.equalsIgnoreCase("Constant")){
//                            Label lab = new Label("1");
//                            lab.setLayoutX(b.positionX1 + (width/3));
//                            lab.setLayoutY(b.positionY1 + (height/4));
//                            layout.getChildren().add(lab);
//                        }
//                        else if (b.name.equalsIgnoreCase("Scope")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Scope.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                        }
//                        else if (b.name.equalsIgnoreCase("Unit Delay")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Unit Delay.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                       }


                    }
                } catch (FileNotFoundException e) {
                    throw new RuntimeException(e);
                }
                




\*
******************************************************************************************************
************************************************************************************************************************************
* Name: Mohaned Khaled Hassan
* ID: 2001372
* GitHub: Username: MohandKhh
*/                
                
                
                
                try {
                    for (Line l : PropertiesOfDiagrams.extractLine(oututFile)) {
                        double xBranch = 0;
                        double yBranch = 0;
                        javafx.scene.shape.Line line = null;
                        ArrayList<Point> points = new ArrayList<>();
                        for (Block bb : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                            if (l.blockOut != null && l.blockOut.equals(bb.SID) && !bb.blockMirror)
                                points.add(bb.calculateRightSidePoints().get(l.orderOut - 1));
                            if (l.blockOut != null && l.blockOut.equals(bb.SID) && bb.blockMirror)
                                points.add(bb.calculateLeftSidePoints().get(l.orderOut - 1));
                        }

                        for (Block bbb : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                            if (l.blockIn != null && l.blockIn.equals(bbb.SID) && !bbb.blockMirror)
                                points.add(bbb.calculateLeftSidePoints().get(l.orderIn - 1));
                            if (l.blockIn != null && l.blockIn.equals(bbb.SID) && bbb.blockMirror)
                                points.add(bbb.calculateRightSidePoints().get(l.orderIn - 1));
                        }

                        if (l.pointsLine != null && points.size() == 2) {
                            l.pointsLine.add(0, points.get(0));
                            l.pointsLine.add(points.get(1));
                            double x = l.pointsLine.get(0).x;
                            double y = l.pointsLine.get(0).y;
                            for (int i = 1; i < l.pointsLine.size() - 1; i++) {
                                x += l.pointsLine.get(i).x;
                                y += l.pointsLine.get(i).y;
                                line = new javafx.scene.shape.Line(x - l.pointsLine.get(i).x, y - l.pointsLine.get(i).y, x, y);
                                layout.getChildren().add(line);
                                line.setStrokeWidth(3);
                                line.setStroke(Color.web("3399CC"));
                            }
                            line = new javafx.scene.shape.Line(x, y, points.get(1).x, points.get(1).y);
                            line.setStrokeWidth(3);
                            line.setStroke(Color.web("3399CC"));

                            Polygon arrowhead = new Polygon();
                            arrowhead.getPoints().addAll(0.0, 0.0, -6.8, 3.5, -6.8, -3.5);
                            arrowhead.setFill(Color.BLACK);
                            arrowhead.setStroke(Color.web("3399CC"));

                            // Set the arrowhead position at the end of the line
                            arrowhead.setLayoutX(line.getEndX());
                            arrowhead.setLayoutY(line.getEndY());
                            layout.getChildren().addAll(line, arrowhead);
                        }

                        if (l.pointsLine == null) {
                            line = new javafx.scene.shape.Line(points.get(0).x, points.get(0).y, points.get(1).x, points.get(1).y);
                            line.setStrokeWidth(3);
                            line.setStroke(Color.web("3399CC"));

                            Polygon arrowhead = new Polygon();
                            arrowhead.getPoints().addAll(0.0, 0.0, -6.8, 3.5, -6.8, -3.5);
                            arrowhead.setFill(Color.BLACK);
                            arrowhead.setStroke(Color.web("3399CC"));

                            // Set the arrowhead position at the end of the line
                            arrowhead.setLayoutX(line.getEndX());
                            arrowhead.setLayoutY(line.getEndY());
                            layout.getChildren().addAll(line, arrowhead);
                        } else if (l.pointsLine != null && points.size() == 1) {
                            l.pointsLine.add(0, points.get(0));
                            double x = l.pointsLine.get(0).x;
                            double y = l.pointsLine.get(0).y;
                            for (int i = 1; i < l.pointsLine.size(); i++) {
                                x += l.pointsLine.get(i).x;
                                y += l.pointsLine.get(i).y;
                                line = new javafx.scene.shape.Line(x - l.pointsLine.get(i).x, y - l.pointsLine.get(i).y, x, y);
                                layout.getChildren().add(line);
                                line.setStrokeWidth(3);
                                line.setStroke(Color.web("3399CC"));
                                xBranch = x;
                                yBranch = y;
                            }

                        }

                        if (l.branches != null) {
                            for (int i = 0; i < l.numOfBranches; i++) {
                                boolean flagMirror = false;
                                ArrayList<Point> branchPoints = new ArrayList<>();
                                branchPoints.add(new Point(xBranch, yBranch));
                                double x = xBranch;
                                double y = yBranch;
                                for (int j = 0; j < l.branches.get(i).numOfPoints; j++) {
                                    x += l.branches.get(i).pointsBranch.get(j).x;
                                    y += l.branches.get(i).pointsBranch.get(j).y;
                                    Point p = new Point(x, y);
                                    branchPoints.add(p);
                                }
                                for (Block bbbb : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                                    if (l.branches.get(i).blockIn != null && l.branches.get(i).blockIn.equals(bbbb.SID) && !bbbb.blockMirror)
                                        branchPoints.add(bbbb.calculateLeftSidePoints().get(l.branches.get(i).orderIn - 1));
                                    if (l.branches.get(i).blockIn != null && l.branches.get(i).blockIn.equals(bbbb.SID) && bbbb.blockMirror) {
                                        branchPoints.add(bbbb.calculateRightSidePoints().get(l.branches.get(i).orderIn - 1));
                                        flagMirror = true;
                                    }
                                }
                                for (int j = 1; j <= branchPoints.size() - 1; j++) {
                                    line = new javafx.scene.shape.Line(branchPoints.get(j - 1).x, branchPoints.get(j - 1).y, branchPoints.get(j).x, branchPoints.get(j).y);
                                    line.setStrokeWidth(3);
                                    line.setStroke(Color.web("3399CC"));
                                    layout.getChildren().add(line);
                                }
                                if (flagMirror) {
                                    Polygon arrowhead = new Polygon();
                                    arrowhead.getPoints().addAll(0.0, 0.0, 6.8, 3.5, 6.8, -3.5);
                                    arrowhead.setFill(Color.BLACK);
                                    arrowhead.setStroke(Color.web("3399CC"));

                                    // Set the arrowhead position at the end of the line
                                    arrowhead.setLayoutX(branchPoints.get(branchPoints.size() - 1).x);
                                    arrowhead.setLayoutY(branchPoints.get(branchPoints.size() - 1).y);
                                    layout.getChildren().addAll(arrowhead);
                                } else {
                                    Polygon arrowhead = new Polygon();
                                    arrowhead.getPoints().addAll(0.0, 0.0, -6.8, 3.5, -6.8, -3.5);
                                    arrowhead.setFill(Color.BLACK);
                                    arrowhead.setStroke(Color.web("3399CC"));

                                    // Set the arrowhead position at the end of the line
                                    arrowhead.setLayoutX(branchPoints.get(branchPoints.size() - 1).x);
                                    arrowhead.setLayoutY(branchPoints.get(branchPoints.size() - 1).y);
                                    layout.getChildren().addAll(arrowhead);
                                }
                            }

                        }
                        Circle boldPoint = new Circle(xBranch, yBranch, 2.3);
                        boldPoint.setFill(Color.BLACK);
                        boldPoint.setStroke(Color.BLACK);
                        boldPoint.setStrokeWidth(2);
                        boldPoint.toFront();
                        layout.getChildren().add(boldPoint);
                    }
                } catch (FileNotFoundException e) {
                    throw new RuntimeException(e);
                }

                /////////////////////////////
                primaryStage.setScene(scene2);
            });
            grid.add(lb,35,25);
            grid.add(btn,35,28);

            primaryStage.setScene(scene1);
            primaryStage.show();

        }
}


