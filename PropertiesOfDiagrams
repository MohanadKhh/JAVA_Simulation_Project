/*
Name: Mohammed Magdy Mahrous Morsy 
ID: 2000927
*/
package Project;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PropertiesOfDiagrams {
    static Pattern patternEqual = Pattern.compile("(?<=\\=\\\")([^\\\"]+)");
    static Pattern patternNum = Pattern.compile("-?\\d+(\\.\\d+)?");
    static Matcher matcher;

    public static ArrayList<Block> extractBlocks(File file) throws FileNotFoundException {
        Scanner scan = new Scanner(file);
        ArrayList<Block> arrBlocks = new ArrayList();
        while (scan.hasNextLine()) {
            String line = scan.nextLine();
            if (line.contains("<Block")) {
                Block b = new Block();
                matcher = patternEqual.matcher(line);

                for (int i = 0; matcher.find(); i++) {
                    switch (i) {
                        case 0:
                            b.setBlockType(matcher.group());
                            break;
                        case 1:
                            b.setName(matcher.group());
                            break;
                        case 2:
                            b.setSID(matcher.group());
                            break;
                        default:
                            break;
                    }
                }

                while (!line.contains("</Block>") && scan.hasNextLine()) {

                    if (line.contains("Position")) {
                        matcher = patternNum.matcher(line);
                        for (int i = 0; matcher.find(); i++) {
                            switch (i) {
                                case 0:
                                    b.setPositionX1(Integer.parseInt((matcher.group())));
                                    break;
                                case 1:
                                    b.setPositionY1(Integer.parseInt((matcher.group())));
                                    break;
                                case 2:
                                    b.setPositionX2(Integer.parseInt(matcher.group()));
                                    break;
                                case 3:
                                    b.setPositionY2(Integer.parseInt(matcher.group()));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    if (line.contains("Ports")) {
                        matcher = patternNum.matcher(line);

                        for (int i = 0; matcher.find(); i++) {
                            switch (i) {
                                case 0:
                                    b.setInputPorts(Integer.parseInt((matcher.group())));
                                    break;
                                case 1:
                                    b.setOutputPorts(Integer.parseInt((matcher.group())));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    if (line.contains("Inputs")) {
                        String inputs = line.substring(line.indexOf(">") + 1 , line.indexOf("</"));
                        b.setInputsSymbols(inputs);
                    }

                    if (line.contains("Outputs")) {
                        String outputs = line.substring(line.indexOf(">") + 1 , line.indexOf("</"));
                        b.setOutputsSymbols(outputs);
                    }

                    if (line.contains("BlockMirror")) {
                        String outputs = line.substring(line.indexOf(">") + 1 , line.indexOf("</"));
                        if(outputs.equalsIgnoreCase("on"))
                            b.setBlockMirror(true);
                        else
                            b.setBlockMirror(false);
                    }

                    line = scan.nextLine();
                }

                arrBlocks.add(b);
            }
        }
        return arrBlocks;
    }
//*****************************************************************************
 /*
Name: Sara Yasser Abdelmageed Meckawy Hemdan
ID: 20P8099
*/


    public static ArrayList<Linee> extractLine(File file) throws FileNotFoundException {
        Scanner scan = new Scanner(file);
        ArrayList<Linee> arrLine = new ArrayList();
        while (scan.hasNextLine()) {
            String line = scan.nextLine();
            if (line.contains("<Line>")) {
                int counterBranches = 0;
                Linee l = new Linee();
                ArrayList<Branch>branches = new ArrayList<>();

                while (!line.contains("</Line>") && scan.hasNextLine()) {

                    if (line.contains("Src")) {
                        matcher = patternNum.matcher(line);
                        for (int i = 0; matcher.find(); i++) {
                            switch (i) {
                                case 0:
                                    l.setBlockOut(matcher.group());
                                    break;
                                case 1:
                                    l.setOrderOut(Integer.parseInt((matcher.group())));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    if (line.contains("Dst")) {
                        matcher = patternNum.matcher(line);

                        for (int i = 0; matcher.find(); i++) {
                            switch (i) {
                                case 0:
                                    l.setBlockIn(matcher.group());
                                    break;
                                case 1:
                                    l.setOrderIn(Integer.parseInt((matcher.group())));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    if (line.contains("Points")) {
                        int numOfPoints = (line.length() - line.replace(String.valueOf(';'), "").length()) + 1 ;
                        ArrayList<Point> points = new ArrayList<>();
                        matcher = patternNum.matcher(line);

                        for (int i = 0; i<numOfPoints; i++) {
                            Point p = new Point();
                            matcher.find();
                            p.setX(Integer.parseInt(matcher.group()));
                            matcher.find();
                            p.setY(Integer.parseInt(matcher.group()));
                            points.add(p);
                        }
                        l.setNumOfPoints(numOfPoints);
                        l.setPointsLine(points);
                    }

                    if (line.contains("<Branch>")) {
                        Branch branch = new Branch();
                        counterBranches++;

                        while (!line.contains("</Branch>")) {
                            if(line.contains("Points")) {
                                int numOfPoints = (line.length() - line.replace(String.valueOf(';'), "").length()) + 1 ;
                                ArrayList<Point> points = new ArrayList<>();
                                matcher = patternNum.matcher(line);

                                for (int i = 0; i<numOfPoints; i++) {
                                    Project.Point p = new Project.Point();
                                    matcher.find();
                                    p.setX(Integer.parseInt(matcher.group()));
                                    matcher.find();
                                    p.setY(Integer.parseInt(matcher.group()));
                                    points.add(p);
                                }
                                branch.setPointsBranch(points);
                                branch.setNumOfPoints(numOfPoints);
                            }

                            if(line.contains("Dst")) {
                                matcher = patternNum.matcher(line);

                                for (int i = 0; matcher.find(); i++) {
                                    switch (i) {
                                        case 0:
                                            branch.setBlockIn(matcher.group());
                                            break;
                                        case 1:
                                            branch.setOrderIn(Integer.parseInt((matcher.group())));
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }

                            line = scan.nextLine();

                        }
                        branches.add(branch);
                    }
                    line = scan.nextLine();
                }
                if(counterBranches==0)
                    l.setBranches(null);
                else
                    l.setBranches(branches);
                l.setNumOfBranches(counterBranches);
                arrLine.add(l);
            }
        }
        return arrLine;
    }
}
